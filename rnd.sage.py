"""
For the query positions we draw values from PRNG until we get as many unique values as specified by num_queries
As checking if for dupplicates would be of quadratic complexity drawing 1000 values would generate 1 000 000 constraints
The following proves that drawing 2 * NUM_QUERIES 
"""


# This file was *autogenerated* from the file rnd.sage
from sage.all_cmdline import *   # import sage library

_sage_const_128 = Integer(128); _sage_const_32 = Integer(32); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2)
from math import factorial


DOMAIN_SIZE = _sage_const_128 
NUM_QUERIES = _sage_const_32 

def step(x,n,memo = {}):
    if not (x,n) in memo.keys():
        if x == NUM_QUERIES:
            memo[(x,n)] = _sage_const_1 
        elif n == _sage_const_0 :
            memo[(x,n)] = _sage_const_0 
        else:
            memo[(x,n)] = (((DOMAIN_SIZE - x )/ DOMAIN_SIZE) * step(x+_sage_const_1 , n-_sage_const_1 ) + x / DOMAIN_SIZE * step(x, n-_sage_const_1 ))
    return memo[(x,n)]

t = _sage_const_0 
while (_sage_const_1  - step(_sage_const_0 ,t))/_sage_const_2 **-_sage_const_128   > _sage_const_1  :
    t += _sage_const_1 
print(t)

